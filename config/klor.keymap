//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "keys_pt_abnt2.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

#define ENGRAM   0
#define NAV      1
#define PROD     2
#define QWERTY   3

/ {
    behaviors {
        left_hand_hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 29 30 31 32 33 34 35 40 41 42 43>;
            hold-trigger-on-release;
        };

        cecedilha: cecedilha {
            compatible = "zmk,behavior-mod-morph";
            label = "CECEDILHA";
            bindings = <&kp C>, <&kp PT_C_CEDILLA>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings = <&kp PT_QMARK>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PT_DOT>, <&kp PT_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_masculine_ordinal: o_masculine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "O_MASCULINE_ORDINAL";
            bindings = <&kp O>, <&kp PT_MASCULINE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_S_dollar: control_S_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_S_DOLLAR";
            bindings = <&left_hand_hm RIGHT_CONTROL S>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_A_feminine_ordinal: control_A_feminine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_A_FEMININE_ORDINAL";
            bindings =
                <&left_hand_hm LEFT_CONTROL A>,
                <&kp PT_FEMININE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        apost_slash: apost_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "APOST_SLASH";
            bindings = <&kp APOS>, <&kp KP_SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        hold_sticky: hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        super_shift: super_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPER_SHIFT";
            bindings = <&hold_sticky LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        control_H_hash: control_H_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_H_HASH";
            bindings = <&right_hand_hm RIGHT_CONTROL H>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_S_dollar: alt_S_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_S_DOLLAR";
            bindings = <&right_hand_hm RIGHT_ALT S>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        comma_slash: comma_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SLASH";
            bindings = <&kp PT_COMMA>, <&kp KP_SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        P_percentage: P_percentage {
            compatible = "zmk,behavior-mod-morph";
            label = "P_PERCENTAGE";
            bindings = <&kp P>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        B_Ampersand: B_Ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "B_AMPERSAND";
            bindings = <&kp B>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        L_pipe: L_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "L_PIPE";
            bindings = <&kp L>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_RALT|MOD_LALT)>;
        };

        U_underscore: U_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "U_UNDERSCORE";
            bindings = <&kp U>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        comma_slash_backslash: comma_slash_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SLASH_BACKSLASH";
            bindings = <&comma_slash>, <&kp PT_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        open_parentesis_less: open_parentesis_less {
            compatible = "zmk,behavior-mod-morph";
            label = "OPEN_PARENTESIS_LESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        close_parentesis_greater: close_parentesis_greater {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSE_PARENTESIS_GREATER";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        command_T_shift_same: command_T_shift_same {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_T_SHIFT_SAME";
            bindings = <&kp LG(T)>, <&kp LS(LG(T))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        command_R_shift_same: command_R_shift_same {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_R_SHIFT_SAME";
            bindings = <&kp LG(R)>, <&kp LS(LG(R))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_hand_hm: right_hand_hm {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HAND_HM";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 28 36 37 38 39>;
        };

        layer_1_backspace_delete: layer_1_backspace_delete {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_1_BACKSPACE_DELETE";
            bindings = <&sl>, <&backspace_delete>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        esc_to_layer_3: esc_to_layer_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_TO_LAYER_3";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&to 3>;
        };

        esc_to_layer_0: esc_to_layer_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_TO_LAYER_0";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Esc_one_handed {
            bindings = <&kp ESC>;
            key-positions = <26 27>;
            require-prior-idle-ms = <150>;
        };

        semicolon {
            bindings = <&kp PT_SEMICOLON>;
            key-positions = <15 16>;
            layers = <0>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        enter_one_handed {
            bindings = <&kp ENTER>;
            key-positions = <14 15>;
            require-prior-idle-ms = <150>;
        };

        to_engram {
            bindings = <&to 0>;
            key-positions = <3 38>;
            layers = <4 5 0 3 2>;
        };

        to_num {
            bindings = <&to 3>;
            key-positions = <38 1>;
            layers = <0 4 5 3 2>;
        };

        to_nav {
            bindings = <&to 2>;
            key-positions = <38 2>;
            layers = <0 5 4 2 3>;
        };

        to_QWERTY {
            bindings = <&to 4>;
            key-positions = <0 38>;
            layers = <0 4 5 2 3>;
        };

        to_RGB {
            bindings = <&to 5>;
            key-positions = <38 4>;
            layers = <0 3 2 4 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        engram_layer {
            bindings = <
        &B_Ampersand  &kp Y                     &o_masculine_ordinal           &U_underscore                   &kp Z                                       &kp J                  &kp L            &kp D                           &kp W          &kp Q
&trans  &cecedilha    &left_hand_hm LEFT_ALT I  &left_hand_hm LEFT_COMMAND E   &control_A_feminine_ordinal     &comma_slash                                &dot_colon             &control_H_hash  &right_hand_hm RIGHT_COMMAND T  &alt_S_dollar  &kp N          &trans
&trans  &kp V         &kp X                     &kp G                          &kp K                           &kp PT_APOSTROPHE  &kp C_PLAY  &kp C_PAUSE  &question_exclamation  &kp R            &kp M                           &kp F          &P_percentage  &trans
                                                &layer_1_backspace_delete 1 0  &left_hand_hm LEFT_SHIFT SPACE  &lt 3 TAB          &trans      &trans       &super_shift           &lt 2 ENTER      &esc_to_layer_3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_NEXT C_PREV>;
            label = "ENGRAM";
        };

        Accents_controls {
            bindings = <
        &kp F2         &kp LG(F)  &kp LG(LS(L))  &kp LG(PT_PERIOD)  &kp LG(PT_COMMA)                  &trans  &trans        &trans        &trans        &trans
&trans  &kp LG(PT_N4)  &trans     &trans         &trans             &kp LG(PT_N3)                     &trans  &kp PT_ACUTE  &kp PT_TILDE  &kp PT_CARET  &kp PT_GRAVE  &trans
&trans  &kp LG(R)      &kp LG(N)  &kp LG(T)      &kp LG(W)          &kp LG(Q)         &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans
                                  &trans         &trans             &trans            &trans  &trans  &trans  &trans        &trans
            >;

            label = "ACCENTS";
        };

        Nav_Mouse_Scroll {
            bindings = <
        &trans  &trans  &trans  &trans  &trans                  &mkp MCLK  &bt BT_NXT      &kp K_SCROLL_UP  &kp K_SCROLL_DOWN  &bt BT_CLR_ALL
&trans  &trans  &trans  &trans  &trans  &trans                  &mkp LCLK  &kp LEFT_ARROW  &kp UP           &kp DOWN_ARROW     &kp RIGHT       &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp RCLK  &kp HOME        &kp PG_UP        &kp PAGE_DOWN      &kp END         &trans
                        &trans  &trans  &trans  &trans  &trans  &trans     &trans          &trans
            >;

            label = "MOUSE";
        };

        Num_Calc_parentesis {
            bindings = <
        &kp KP_PLUS  &kp KP_MINUS     &kp KP_MULTIPLY  &kp KP_SLASH  &kp KP_EQUAL                     &kp PT_PIPE     &open_parentesis_less  &close_parentesis_greater  &kp PT_LEFT_BRACKET  &kp PT_RIGHT_BRACKET
&trans  &kp KP_N0    &kp KP_N1        &kp KP_N2        &kp KP_N3     &kp KP_N4                        &kp KP_N5       &kp KP_N6              &kp KP_N7                  &kp KP_N8            &kp KP_N9             &trans
&trans  &kp KP_N5    &kp KP_NUMBER_6  &kp KP_N7        &kp KP_N8     &kp KP_NUMBER_9  &trans  &trans  &kp PT_PERCENT  &kp PT_LESS_THAN       &kp PT_GREATER_THAN        &kp PT_LEFT_BRACE    &kp PT_RIGHT_BRACE    &trans
                                      &trans           &trans        &trans           &trans  &trans  &trans          &trans                 &esc_to_layer_0
            >;

            label = "CALC";
        };

        qwerty_layer {
            bindings = <
        &kp Q    &kp W                     &kp E                         &kp R                         &kp T                   &kp Y   &kp U                           &kp I                          &kp O                       &kp P
&trans  &kp A    &left_hand_hm LEFT_ALT S  &left_hand_hm LEFT_COMMAND D  &left_hand_hm LEFT_CONTROL F  &kp G                   &kp H   &right_hand_hm RIGHT_CONTROL J  &right_hand_hm LEFT_COMMAND K  &right_hand_hm RIGHT_ALT L  &kp SEMI               &trans
&trans  &lt 1 Z  &kp X                     &cecedilha                    &kp V                         &kp B   &trans  &trans  &kp N   &kp M                           &comma_slash                   &dot_colon                  &question_exclamation  &trans
                                           &trans                        &trans                        &trans  &trans  &trans  &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "QWERTY";
        };

        rgb_layer {
            bindings = <
        &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &rgb_ug RGB_HUI                  &trans  &trans  &trans  &trans  &trans
&trans  &trans           &trans           &trans           &trans           &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans           &trans           &trans           &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "RGB";
        };
    };
};
