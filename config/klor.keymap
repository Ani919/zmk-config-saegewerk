//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "keys_pt_abnt2.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/mouse.h>

#define ENGRAM   0
#define NAV      1
#define PROD     2
#define QWERTY   3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        cecedilha: cecedilha {
            compatible = "zmk,behavior-mod-morph";
            label = "CECEDILHA";
            bindings = <&kp C>, <&kp PT_C_CEDILLA>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PT_DOT>, <&kp PT_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_masculine_ordinal: o_masculine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "O_MASCULINE_ORDINAL";
            bindings = <&kp O>, <&kp PT_MASCULINE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_S_dollar: control_S_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_S_DOLLAR";
            bindings = <&mt RIGHT_CONTROL S>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        command_H_hash: command_H_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_H_HASH";
            bindings = <&mt RIGHT_COMMAND A>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_A_feminine_ordinal: control_A_feminine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_A_FEMININE_ORDINAL";
            bindings =
                <&mt LEFT_CONTROL A>,
                <&kp PT_FEMININE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        apost_slash: apost_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "APOST_SLASH";
            bindings = <&kp APOS>, <&kp KP_SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        hold_sticky: hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        super_shift: super_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPER_SHIFT";
            bindings = <&hold_sticky LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        control_H_hash: control_H_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_H_HASH";
            bindings = <&hm RIGHT_CONTROL H>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_S_dollar: alt_S_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_S_DOLLAR";
            bindings = <&hm RIGHT_ALT S>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        comma_slash: comma_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SLASH";
            bindings = <&kp PT_COMMA>, <&kp KP_SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        X_percentage: X_percentage {
            compatible = "zmk,behavior-mod-morph";
            label = "X_PERCENTAGE";
            bindings = <&kp X>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        B_Ampersand: B_Ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "B_AMPERSAND";
            bindings = <&kp B>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_i_pipe: alt_i_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_I_PIPE";
            bindings = <&hm LEFT_ALT I>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        U_underscore: U_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "U_UNDERSCORE";
            bindings = <&kp U>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        comma_slash_backslash: comma_slash_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SLASH_BACKSLASH";
            bindings = <&comma_slash>, <&kp PT_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        open_parentesis_less: open_parentesis_less {
            compatible = "zmk,behavior-mod-morph";
            label = "OPEN_PARENTESIS_LESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        close_parentesis_greater: close_parentesis_greater {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSE_PARENTESIS_GREATER";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        command_T_shift_same: command_T_shift_same {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_T_SHIFT_SAME";
            bindings = <&kp LG(T)>, <&kp LS(LG(T))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        command_R_shift_same: command_R_shift_same {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_R_SHIFT_SAME";
            bindings = <&kp LG(R)>, <&kp LS(LG(R))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        accents_C_Cedilha: accents_C_Cedilha {
            compatible = "zmk,behavior-hold-tap";
            label = "ACCENTS_C_CEDILHA";
            bindings = <&mo>, <&cecedilha>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        Esc_one_handed {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            require-prior-idle-ms = <150>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <15 14>;
            layers = <0>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <13 2>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        enter_one_handed {
            bindings = <&kp ENTER>;
            key-positions = <22 23>;
            require-prior-idle-ms = <150>;
        };

        to_engram {
            bindings = <&to 0>;
            key-positions = <3 34>;
            layers = <1 2 3 4>;
        };

        to_num {
            bindings = <&to 2>;
            key-positions = <2 34>;
            layers = <0 3 4>;
        };

        to_nav {
            bindings = <&to 3>;
            key-positions = <1 34>;
            layers = <0 2 1 4>;
        };

        to_QWERTY {
            bindings = <&to 4>;
            key-positions = <0 34>;
            layers = <0 1 2 3>;
        };

        command_Q {
            bindings = <&kp LG(Q)>;
            key-positions = <24 34>;
        };

        command_W {
            bindings = <&kp LG(W)>;
            key-positions = <23 34>;
        };

        command_T {
            bindings = <&kp LG(T)>;
            key-positions = <22 34>;
        };

        command_N {
            bindings = <&kp LG(N)>;
            key-positions = <21 34>;
        };

        command_R {
            bindings = <&kp LG(R)>;
            key-positions = <20 34>;
        };

        RGB {
            bindings = <&to 4>;
            key-positions = <36 37>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        engram_layer {
            bindings = <
        &kp B     &kp Y        &o_masculine_ordinal  &kp U                        &kp V                                      &kp J                  &kp L                  &kp D            &kp W              &kp Q
&trans  &cedilha  &hm LCTRL I  &hm LEFT_ALT E        &command_A_feminine_ordinal  &comma_equal                               &dot_colon             &command_H_hash        &hm RIGHT_ALT T  &control_S_dollar  &kp N  &trans
&trans  &kp G     &kp X        &kp Z                 &kp K                        &dt_apost_slash  &bootloader  &bootloader  &question_exclamation  &kp R                  &kp M            &kp F              &kp P  &trans
                               &mt LEFT_COMMAND TAB  &mt LSHIFT SPACE             &kp BSPC         &trans       &trans       &kp BSPC               &mt RIGHT_SHIFT ENTER  &kp ESC
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "ENGRAM";
        };

        nav_layer {
            bindings = <
        &kp LEFT         &kp DOWN             &kp UP                    &kp RIGHT                     &to 0                                      &kp MINUS        &kp KP_PLUS                    &kp KP_EQUAL               &kp PRCNT             &kp BACKSLASH
&trans  &kp KP_NUMBER_0  &control_1_pipe      &mt LEFT_ALT KP_NUMBER_2  &mt LEFT_COMMAND KP_NUMBER_3  &kp KP_NUMBER_4                            &kp KP_NUMBER_5  &mt RIGHT_COMMAND KP_NUMBER_6  &mt RIGHT_ALT KP_NUMBER_7  &control_8_ampersand  &kp KP_NUMBER_9   &trans
&trans  &kp LESS_THAN    &kp PT_LEFT_BRACKET  &kp LEFT_BRACE            &kp LEFT_PARENTHESIS          &kp KP_SLASH     &bootloader  &bootloader  &kp KP_MULTIPLY  &kp RIGHT_PARENTHESIS          &kp RIGHT_BRACE            &kp PT_RIGHT_BRACKET  &kp GREATER_THAN  &trans
                                              &trans                    &trans                        &trans           &trans       &trans       &trans           &trans                         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "NAV";
        };

        prod_layer {
            bindings = <
        &kp LG(N)      &kp LG(T)  &kp LG(X)  &kp LG(A)    &to 0                                &out OUT_TOG     &rgb_ug RGB_BRI  &bt BT_NXT    &kp PAGE_UP    &kp C_POWER
&trans  &kp LG(Q)      &kp LG(W)  &kp LG(C)  &kp LG(V)    &kp LG(R)                            &rgb_ug RGB_EFF  &kp PT_ACUTE     &kp PT_TILDE  &kp PT_CARET   &kp PT_GRAVE  &trans
&trans  &kp LG(LS(L))  &kp LG(S)  &kp LG(Z)  &kp LG(DOT)  &kp LG(F)  &bootloader  &bootloader  &trans           &rgb_ug RGB_BRD  &bt BT_CLR    &kp PAGE_DOWN  &kp CAPS      &trans
                                  &trans     &trans       &trans     &trans       &trans       &trans           &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "PROD";
        };

        qwerty_layer {
            bindings = <
        &kp Q  &kp W               &kp E           &kp R               &kp T                             &kp Y   &kp U                &kp I            &kp O                &kp P
&trans  &kp A  &hm LEFT_CONTROL S  &hm LEFT_ALT D  &hm LEFT_COMMAND F  &kp G                             &kp H   &hm RIGHT_COMMAND J  &hm RIGHT_ALT K  &hm RIGHT_CONTROL L  &dt_apost_slash        &trans
&trans  &kp Z  &kp X               &cedilha        &kp V               &kp B   &bootloader  &bootloader  &kp N   &kp M                &comma_equal     &dot_colon           &question_exclamation  &trans
                                   &trans          &trans              &trans  &trans       &trans       &trans  &trans               &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "QWERTY";
        };

        rgb_layer {
            bindings = <
        &rgb_ug RGB_EFF  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI                            &trans  &trans  &trans  &trans  &trans
&trans  &rgb_ug RGB_EFR  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD                            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans           &trans           &trans           &bt BT_CLR       &bt BT_CLR_ALL   &bootloader  &bootloader  &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans           &trans           &trans           &trans       &trans       &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "RGB";
        };
    };
};
